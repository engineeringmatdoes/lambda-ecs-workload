Parameters:
  RepositoryName:
    Type: String
    Description: The name of the ECR repository to store images
  ArtifactVersion:
    Type: String
    Description: The version of the lambda artifact to deploy
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to use
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The subnets to use
  DeploymentType:
    Type: String
    Description: The type of deployment to use
    Default: Lambda
    AllowedValues:
      - Lambda
      - ECS

Conditions:
  IsLambda: !Equals [!Ref DeploymentType, Lambda]
  IsECS: !Equals [!Ref DeploymentType, ECS]

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-${RepositoryName}
      RetentionInDays: 7

  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the lambda function
      VpcId: !Ref VpcId

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-${RepositoryName}-lambda
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-${RepositoryName}-lambda
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: AllowLambdaToSendLogsToCloudWatch
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !GetAtt LogGroup.Arn
              - Sid: AllowLambdaToManageENIs
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                Resource: "*"

  Lambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref RepositoryName
      Code:
        ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:${ArtifactVersion}
      ImageConfig:
        Command:
          - lambda-function.handler
      PackageType: Image
      LoggingConfig:
        LogGroup: !Ref LogGroup
      Architectures:
        - arm64
      MemorySize: 128
      Timeout: 10
      Role: !GetAtt LambdaExecutionRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds: !Ref SubnetIds

  AlbPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt Lambda.Arn
      Action: lambda:InvokeFunction
      Principal: elasticloadbalancing.amazonaws.com
      SourceAccount: !Ref AWS::AccountId
      SourceArn: !Sub arn:aws:elasticloadbalancing:${AWS::Region}:${AWS::AccountId}:targetgroup/${RepositoryName}-lambda/*

  LambdaTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: IsLambda
    DependsOn: AlbPermission
    Properties:
      Name: !Sub ${RepositoryName}-lambda
      TargetType: lambda
      Targets:
        - Id: !GetAtt Lambda.Arn

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-${RepositoryName}-ecs
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-${RepositoryName}-ecs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LogShipping
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-${RepositoryName}:*
              - Sid: ECRGetAuthorizationToken
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Sid: ECRReadOnly
                Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RepositoryName}

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the ECS Service
      VpcId: !Ref VpcId

  ECSSecurityGroupIngressRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
      GroupId: !GetAtt ECSSecurityGroup.GroupId

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref RepositoryName
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      RuntimePlatform:
        CpuArchitecture: arm64
      ContainerDefinitions:
        - Name: !Ref RepositoryName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:${ArtifactVersion}
          Essential: True
          EntryPoint:
            - ""
          Command:
            - /nginx-start.sh
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: nginx

  ECSCluster:
    Type: AWS::ECS::Cluster
    Condition: IsECS
    Properties:
      ClusterName: my-cluster
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT

  ECSService:
    Type: AWS::ECS::Service
    Condition: IsECS
    DependsOn: ListenerRule1
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Ref RepositoryName
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      LoadBalancers:
        - ContainerName: !Ref RepositoryName
          ContainerPort: 8080
          TargetGroupArn: !Ref ECSTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref ECSSecurityGroup
          Subnets: !Ref SubnetIds

  ECSTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Condition: IsECS
    Properties:
      Name: !Sub ${RepositoryName}-ecs
      Protocol: HTTP
      Port: 8080
      TargetType: ip
      VpcId: !Ref VpcId

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the load balancer
      VpcId: !Ref VpcId

  LoadBalancerSecurityGroupInboundRule1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId

  LoadBalancerSecurityGroupOutboundRule1:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      IpProtocol: tcp
      FromPort: 8080
      ToPort: 8080
      DestinationSecurityGroupId: !GetAtt ECSSecurityGroup.GroupId
      GroupId: !GetAtt LoadBalancerSecurityGroup.GroupId

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Ref RepositoryName
      Subnets: !Ref SubnetIds
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Scheme: internet-facing
      Type: application
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 60

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: fixed-response
          FixedResponseConfig:
            StatusCode: 405
            MessageBody: "Method not allowed"
            ContentType: text/plain
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  ListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn:
            Fn::If:
              - IsLambda
              - !Ref LambdaTargetGroup
              - !Ref ECSTargetGroup
      Conditions:
        - Field: http-request-method
          HttpRequestMethodConfig:
            Values:
              - GET_OR_HEAD
      ListenerArn: !Ref LoadBalancerListener
      Priority: 10

Outputs:
  LoadBalancerDnsName:
    Value: !GetAtt LoadBalancer.DNSName
