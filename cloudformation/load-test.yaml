Parameters:
  BucketName:
    Type: String
    Description: The name of the S3 Bucket to store test reports
  RepositoryName:
    Type: String
    Description: The name of the ECR repository to store images
  ArtifactVersion:
    Type: String
    Description: The version of the lambda artifact to deploy
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The VPC to use

Resources:
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ${AWS::StackName}-${RepositoryName}
      RetentionInDays: 7

  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref BucketName
      AccessControl: Private
      VersioningConfiguration:
        Status: Suspended
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldObjects
            Status: Enabled
            Prefix: ""
            ExpirationInDays: 21

  ECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref RepositoryName
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: AllowLambdaToGetAuthorizationToken
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: ecr:GetAuthorizationToken
          - Sid: AllowLambdaToPullImages
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-${RepositoryName}-ecs
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-${RepositoryName}-ecs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: LogShipping
                Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:${AWS::StackName}-${RepositoryName}:*
              - Sid: ECRGetAuthorizationToken
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                Resource: "*"
              - Sid: ECRReadOnly
                Effect: Allow
                Action:
                  - ecr:BatchGetImage
                  - ecr:GetDownloadUrlForLayer
                Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${RepositoryName}
              - Sid: S3BucketWrite
                Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${BucketName}/*

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-${RepositoryName}-ecs-task
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              ArnLike:
                aws:SourceArn: !Sub "arn:aws:ecs:${AWS::Region}:${AWS::AccountId}:*"
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-${RepositoryName}-ecs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: S3BucketWrite
                Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::${BucketName}/*

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for the ECS Service
      VpcId: !Ref VpcId

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref RepositoryName
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      Cpu: 2048
      Memory: 4096
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      RuntimePlatform:
        CpuArchitecture: arm64
      ContainerDefinitions:
        - Name: !Ref RepositoryName
          Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${RepositoryName}:${ArtifactVersion}
          Essential: True
          Environment:
            - Name: TEST_BUCKET_NAME
              Value: !Ref BucketName
          EntryPoint:
            - "/entrypoint.sh"
          Command:
            - ""
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref LogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: k6

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: load-test
      CapacityProviders:
        - FARGATE
        - FARGATE_SPOT
